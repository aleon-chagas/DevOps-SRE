apiVersion: apps/v1
kind: Deployment
metadata:
  name: weather-api
  namespace: weather-app
  labels:
    app.kubernetes.io/name: weather-api
    app.kubernetes.io/component: backend
    app.kubernetes.io/part-of: weather-app
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: weather-api
  template:
    metadata:
      labels:
        app.kubernetes.io/name: weather-api
        app.kubernetes.io/component: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3001"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: weather-api
        image: weather-api:1.0.0
        imagePullPolicy: Never
        ports:
        - containerPort: 3001
          name: http
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: weather-config
              key: NODE_ENV
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: weather-config
              key: PORT
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: weather-config
              key: REDIS_URL
        - name: OPENWEATHER_API_KEY
          valueFrom:
            secretKeyRef:
              name: weather-secrets
              key: OPENWEATHER_API_KEY
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: tmp
        emptyDir: {}
      nodeSelector:
        kubernetes.io/hostname: ip-10-0-3-119
      securityContext:
        fsGroup: 1001
---
apiVersion: v1
kind: Service
metadata:
  name: weather-api-service
  namespace: weather-app
  labels:
    app.kubernetes.io/name: weather-api
    app.kubernetes.io/component: backend
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3001"
    prometheus.io/path: "/metrics"
spec:
  selector:
    app.kubernetes.io/name: weather-api
  ports:
  - port: 3001
    targetPort: 3001
    name: http
  type: ClusterIP